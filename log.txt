简介：代码分割，可以减小总包体，你可以按优先级加载资源，合理利用，可以减小首屏加载时间
方式：
    1、配置 Entry
        缺点：
            1、如果不同入口引入同一个模块，两个入口打包之后的 bundle 都会包含该模块，增大包体
            2、不够灵活
        v5 的 webpack 可以使用，dependOn 去重 https://webpack.js.org/configuration/entry-context/
    2、使用 SplitChunksPlugin
        1、CommonsChunkPlugin 在 v4 被 SplitChunksPlugin（通过配置 optimization.splitChunks） 替换
        2、可以除重，比如两个业务模块都引用了第三方库 lodash，可以将 lodash 单独打包，单独缓存（如果做到 vendor 的 hash 不变？）
    3、使用动态加载方法 import()

